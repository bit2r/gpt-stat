---
output: html_document
editor_options: 
  chunk_output_type: console
---


# 통계

통계학은 왕의 학문이라는 별명을 갖고 있으며, 왕(국가)이 기원전 3,050년 피라미드 건립을 위해 인구조사(센서스)를 했다는 기록이 최초로 남아있다. 
근대 국가운영을 위해 인구, 출생, 사망, 실업자수, 세금 수입, 지출, 수입과 수출 등 자료가 필요하여 발전했으며 **통계학(Statistics)**는 라틴어 Status 정치국가(Political State) 를 의미한다.

한걸음 더 들어가면, 현실세계와 최근 부상하는 메타버스 가상세계에서 데이터를 수집하고 
이를 정리하여 분석작업을 수행하고 측정된 데이터에 대한 요약기술과 데이터에 대한 추론을 담고 있는 것이 통계라고 볼 수 있다.


```{mermaid}
%%| fig-align: center

graph LR

  World["현실/가상<br>세계"] --> Data
  Data["데이터"] --> Analysis["분석"]
  Analysis --> Summary_Technique_Inference["요약기술<br>추론"]
  
  style World fill:#f5d06c,stroke:#333,stroke-width:3px
  style Data fill:#f9d0c4,stroke:#333,stroke-width:3px
  style Analysis fill:#c6def1,stroke:#333,stroke-width:3px
  style Summary_Technique_Inference fill:#e1d5e7,stroke:#333,stroke-width:3px
```



## 통계 분야

데이터가 주어지면 데이터를 기술하는 통계와 추론하는 두가지 영역으로 나눠진다. 
데이터를 기술하는 통계를 **기술통계(Descriptive Statistics)**, 데이터에서 추론하는 
통계를 **추론통계(Inferential Statistics)**로 지칭한다.

## 기술통계

데이터가 수집되어 준비되면 먼저 수집된 데이터의 자료형에 맞춰
요약을 해야한다. 크게 보면 자료형은 범주형과 숫자형으로 나눠지고 
숫자형과 범주형에 관계 없이 중심과 퍼짐을 요약하는 측도가 필요하다.

```{mermaid}
graph LR

  DescirptiveStat["기술통계"] --> DataType["자료형"]
  DataType --> CategoricalData["범주형"]
  DataType --> NumericData["숫자형"]
  CategoricalData --> MeasureCenter["중심"]
  NumericData --> MeasureCenter["중심"]
  MeasureCenter --> MeasureSpread["퍼짐"]
  
  style DescirptiveStat fill:#f5d06c,stroke:#333,stroke-width:3px
  style DataType fill:#f9d0c4,stroke:#333,stroke-width:3px
  style CategoricalData  fill:#c6def1,stroke:#333,stroke-width:3px
  style NumericData  fill:#c6def1,stroke:#333,stroke-width:3px
  style MeasureCenter fill:#e1d5e7,stroke:#333,stroke-width:3px
  style MeasureSpread fill:#e1d5e7,stroke:#333,stroke-width:3px  
```

`palmerpenguins` 패키지에 포함된 `penguins` 데이터셋에 숫자형과 범주형 변수가 포함되어 있어 이를 바탕으로 기술통계에 대한 사례를 살펴보자. `dplyr` 패키지 `glimpse()` 함수를 
사용해서 `penguins` 데이터셋을 살펴보자. `penguins` 데이터셋은 총 8개의 열과 344개의 행으로 구성되어 있으며 다음과 같은 변수들이 포함되어 있다.

- `species`: 펭귄의 종을 나타내는 범주형 변수입니다.
- `island`: 펭귄이 서식하는 섬의 이름을 나타내는 범주형 변수입니다.
- `bill_length_mm`: 펭귄의 부리 길이를 밀리미터 단위로 나타내는 수치형 변수입니다.
- `bill_depth_mm`: 펭귄의 부리 깊이를 밀리미터 단위로 나타내는 수치형 변수입니다.
- `flipper_length_mm`: 펭귄의 플리퍼(날개) 길이를 밀리미터 단위로 나타내는 수치형 변수입니다.
- `body_mass_g`: 펭귄의 체중을 그램 단위로 나타내는 수치형 변수입니다.
- `sex`: 펭귄의 성별을 나타내는 범주형 변수입니다.
- `year`: 관찰 년도를 나타내는 수치형 변수입니다.

::: {.panel-tabset} 

### R

```{r}
library(tidyverse)
library(palmerpenguins)

glimpse(penguins)
```

### 파이썬

```{python}
#| eval: false
from palmerpenguins import load_penguins
import pandas as pd

penguins = load_penguins()

penguins.info()
```


:::


### 중심 측도

`<fct>` 변수는 범주형 자료형이고, `<dbl>`, `<int>` 변수는 숫자형 자료형을 나타내고 있다. 
각 자료형에 맞춰 데이터를 요약해보자. 먼저 숫자형과 범주형 중심을 각각 나타내는 대표측도로 
숫자형은 평균(`mean()` 함수), 범주형은 최빈수(`mode()` 함수)로 펭귄 체중의 평균과 
펭귄 중 최빈종을 각각 계산해보자. R에 최빈값에 대한 내장함수가 없어 사용자 정의함수를 작성해서 별도 계산한다.
 
::: {.panel-tabset} 

### R
 
```{r}
mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

penguins |> 
  summarise(평균_체중 = mean(body_mass_g, na.rm = TRUE),
            최빈종    = mode(species))
```

### 파이썬 {.unnumbered}

```{python}
#| eval: false
import statistics

mean_body_mass_g = penguins['body_mass_g'].mean(skipna=True)
mode_species = penguins['species'].mode()[0]

print(f'펭귄 체중: {mean_body_mass_g}')
print(f'펭귄 최빈종: {mode_species}')
```

:::

### 퍼짐 측도

숫자형 변수의 경우 다양한 퍼짐을 측정하는 통계량이 존재한다. 
변수의 퍼짐을 측정할 때 최대값에서 최소값을 뺀 통계량도 퍼짐을 측정하는 의미있는 지표가 된다.
그외에도 분위수를 기준으로 4분위수를 사용하여 IQR를 계산하거나 상자그림(Box-Plot)에서 분위수에 1.5배수를 곱해 분포의 상하한을 지정한 후 그 범위를 벗어나는 관측점을 이상점으로 
정의하는 방법도 있다. 가장 퍼짐을 측정하는 일반적인 방법은 분산과 표준편차를 혹은 MAD가 있다.

![](images/1920px-Boxplot_vs_PDF.svg.png)

남극에 서식하는 펭귄 체중에 대한 분산과 표준편차를 `var()`, `sd()` 함수를 사용해서 계산할 수 있다.

::: {.panel-tabset} 

### R

```{r}
penguins |> 
  summarise(분산_체중     = var(body_mass_g, na.rm = TRUE),
            표준편차_체중 = sd(body_mass_g, na.rm = TRUE))
```


### 파이썬

```{python}
#| eval: false
import pandas as pd
import numpy as np

분산_체중 = penguins['body_mass_g'].var(skipna=True)
표준편차_체중 = penguins['body_mass_g'].std(skipna=True)

print(f'펭귄 체중 분산: {분산_체중}')
print(f'펭귄 체중 표준편차: {표준편차_체중}')
```

:::

범주형 변수에 대한 퍼짐의 측도도 존재하지만 범주형 변수를 구성하는 범주에 크기가
존재하지 않기 때문에 빈도수를 구해서 살펴보는 것이 일반적이다.


::: {.panel-tabset} 

### R

```{r}
penguins |> 
  count(species, sort = TRUE, name = "빈도수")
```


### 파이썬

```{python}
#| eval: false
frequencies = penguins['species'].value_counts().reset_index()
frequencies.columns = ['species', '빈도수']

frequencies
```

:::


## 가능성

가능성, 승산, 예상, 전망, 형세 등 다양한 방식으로 미래를 알고자 하는 인간의 
호기심이 집대성된 수학의 한분야가 확률이다. 


### 확률

대한민국 시도수는 특별시, 광역시, 자치도 등 포함하여 총 17개가 존재한다. 
17개 시도 중 시도 하나를 무작위로 뽑게 되면 확률이 얼마나 될까?
먼저, 17개 시도에서 "서울"을 고를 경우 $\frac{1}{17} = 0.05882353$ 으로 계산된다.

자연어로 작성된 텍스트를 수학적으로 좀더 엄밀하게 표현하면 다음과 같다.

시도의 수 $n$과 선택할 시도의 수 $r$을 조합의 수식으로 표현하면,

$$
C(n, r) = \frac{n!}{r!(n-r)!}
$$

여기서 시도의 수 $n$은 17이고, 선택할 시도의 수 $r$은 1이다. 
따라서 조합의 수식에 대입하면,

$$
C(17, 1) = \frac{17!}{1!(17-1)!} = 17
$$

이는 17개의 시도 중에서 하나를 선택하는 모든 가능한 방법이 17가지라는 것을 의미한다.

그런데 '서울'이 선택될 확률을 구하려면, '서울'이 선택될 경우의 수 1를 전체 경우의 수 17로 나누면 된다.

$$
P(\text{'서울'}) = \frac{1}{C(17, 1)} = \frac{1}{17} \approx 0.05882353
$$

따라서, '서울'이 선택될 확률은 약 0.05882353 또는 약 5.9%다.

R과 파이썬을 사용해서 모의시험을 다수 수행하게 되면 동일한 결과를 얻을 수 있다.

:::{.panel-tabset}

### R

```{r}
sidoNM <- c("서울", "부산", "대구", "인천", "광주", "대전", "울산", "세종", "경기", "강원", "충북", "충남", "전북", "전남", "경북", "경남", "제주")

# 17개 시도에서 무작위로 시도 하나 추출
sample(sidoNM, 1)

# 상기 과정을 17회 반복
replicate(17, sample(sidoNM, 1))

# 17회 시도명을 추출한 결과 "서울"이 나올 경우를 평균 냄
replicate(17, sample(sidoNM, 1) == "서울") |> mean()

# 반복횟수와 시도명을 달리한 모의시험 함수 제작
calculate_prob <- function(trials = 1000, sido_name = "서울") {
  prob <- (replicate(trials, sample(sidoNM, 1)) == sido_name) |> mean()
  return(prob)
}

# 17개 시도 중 "제주"가 나올 확률을 1만번 반복함
calculate_prob(10000, "제주")
```

### 파이썬

```{python}
import random
import numpy as np

sidoNM = ["서울", "부산", "대구", "인천", "광주", "대전", "울산", "세종", "경기", "강원", "충북", "충남", "전북", "전남", "경북", "경남", "제주"]

# 17개 시도에서 무작위로 시도 하나 추출
print(random.choice(sidoNM))

# 상기 과정을 17회 반복
for _ in range(17):
    print(random.choice(sidoNM))

# 17회 시도명을 추출한 결과 "서울"이 나올 경우를 평균 냄
print(np.mean([random.choice(sidoNM) == "서울" for _ in range(17)]))

# 반복횟수와 시도명을 달리한 모의시험 함수 제작
def calculate_prob(trials = 1000, sido_name = "서울"):
    prob = np.mean([random.choice(sidoNM) == sido_name for _ in range(trials)])
    return prob

# 17개 시도 중 "제주"가 나올 확률을 1만번 반복함
print(calculate_prob(10000, "제주"))
```

:::




### 확률의 덧셈법칙

두 사건 중 적어도 하나만 발생할 확률을 "또는(or)" 연산으로 표현할 수 있는데, 두 사건이 독립을 가정($Pr(\text{A and B}) = Pr(A) \times Pr(B)$)하면 다음과 같이 표현할 수 있다.
이를 **확률의 덧셈법칙(addition law of probability)**이라고 부른다.

$\begin{aligned}
 Pr(\text{A or B}) &= Pr(A) + Pr(B) - Pr(\text{A and B})\\
                   &= Pr(A) + Pr(B) - Pr(A) \times Pr(B)
 \end{aligned}$

#### 넥슨 두 타자

타자의 정규타석은 소속팀의 경기수 $\times$ 3.1로 정의된다. 보통 한 경기에서
타자가 4 혹은 5번 타석에 들어서고 슬럼프 등으로 2군에 내려가는 것을 감안하여 
붙박이 주전급 선수를 가늠하는 기준이다. 이제 넥슨의 수위 타자 두명을 놓고 
두 선수가 매번 타석에서 안타를 치거나 두 선수 중 한 선수가 안타를 치는 확률을 
확률의 덧셈법칙을 통해 확인해 보자. 규정타석을 446 타석으로 놓고 안타를 `1`, 범타를 `0`으로 
정해놓고 2017년 7월 21일 기준 타율 데이터를 참조한다.

``` {r nexen-two-players}
# 1. 넥센 두 타자 ------------
서건창 <- rbinom(446, 1, 0.344)
이정후 <- rbinom(446, 1, 0.333)

# 두선수가 모두 안타를 칠 확률
mean(서건창 & 이정후)

mean(서건창 | 이정후)
mean(서건창==1) + mean(이정후==1) - mean(서건창&이정후)
```

두 선수가 동시에 안타를 칠 확률은 `r round(mean(서건창&이정후), 2)`이 되고, 
두 선수 중 적어도 한 선구가 안타를 칠 확률은 `r round(mean(서건창|이정후),2)`이 된다.

#### 200 안타를 향해서

충분한 타석(540)이 주어졌다고 가정하고 200안타 이상을 때릴 확률은 얼마나 될까? $\frac{200}{540}$ = `r 200/540` 단순 계산해도 3할 7푼이 넘는 고타율이다.

서건창, 이정후 선수를 100,000번 KBO 시즌을 돌리는데 540번 타석에 세워 타율은 현재 타율이라고 가정한다.
이런 가정을 두고 두 선수 중 적어도 한 선수가 200 안타를 칠 확률은 얼마나 될까? 이를 풀기 위해서 한번은 난수를 발생하여 모의실험으로 계산하고, 다른 한번은 누적이항분포 확률을 사용해서 계산한다.

``` {r nexen-200}
# 2. 200 안타  ------------
서건창 <- rbinom(100000, 540, 0.344)
이정후 <- rbinom(100000, 540, 0.333)

# 두선수 중 적어도 한 선수가 200 안타를 칠 확률
mean(서건창 > 200 | 이정후 > 200)

서건창_확률 <- 1 - pbinom(200, 540, 0.344)
이정후_확률 <- 1 - pbinom(200, 540, 0.333)

서건창_확률 + 이정후_확률 - 서건창_확률*이정후_확률
```


### 확률변수 합

두 확률변수를 곱하거나 더하는 경우를 생각할 수 있다. 이항분포에서 나온 두 변수를 더하여 만들어진 새로운 변수는 어떤 특성을 갖게 되는지 살펴보자

$$Z \sim X + Y$$
여기서, $X \sim \text{이항분포}(n, p)$를 따르고, $Y \sim \text{이항분포}(m, p)$를 따를 때 두 확률변수를 합한 $Z$를 살펴보자. [^stackexchange-sum-binom]

[^stackexchange-sum-binom]: [Sum of two independent binomial variables](https://math.stackexchange.com/questions/1176385/sum-of-two-independent-binomial-variables)

$$X + Y \sim \text{이항분포}(n+m, p)$$

#### 두 변수 합에 대한 기대값과 분산

독립인 두 변수에 대한 기대값과 분산은 다음과 같다.

- $E[X+Y] = E[X] + E[Y]$
- $Var[X+Y] = Var[X] + Var[Y]$

#### R 코드을 통한 시각화 및 수치 검정

$X \sim \text{이항분포}(n, p) = \text{이항분포}(10, 0.5)$로 두고, 
$Y \sim \text{이항분포}(m, p) = \text{이항분포}(20, 0.5)$을 놓게 되면,
이론적으로 $X+Y \sim \text{이항분포}(n+m, p) = \text{이항분포}(10+20, 0.5)$이 되고,
`rbinom`함수를 통해 난수를 만들고, 두 변수를 합하여 시각화한다.

``` {r binomial-sum-viz}
binom_df <- tibble(x = rbinom(10000, 10, 0.5),
                       y = rbinom(10000, 20, 0.5))

binom_df %>% 
  mutate(z = x + y) %>% 
  pivot_longer(cols = everything(), names_to = "binom_dist", values_to = "cnt") |> 
  ggplot(aes(x = cnt, y = cnt, color=binom_dist)) +
    geom_bar(stat="identity") +
    facet_wrap(~binom_dist, nrow=3) +
    theme_bw(base_family = "NanumGothic") +
    theme(legend.position = "none") +
    labs(x="성공횟수", y="빈도수", title="두 확률변수의 합")
```

이론값과 난수를 생성하여 두 변수를 합한 결과를 비교한다.

``` {r binom-sum-numerics}
mean(binom_df$x)
mean(binom_df$y)

binom_df %>% mutate(z = x + y) %>% 
  summarise(mean_z = mean(z))
```


## 분포


